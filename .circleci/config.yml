version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.id >>"
            # Instal AWS CLI if not found
            if [[ ! -x "$(command -v aws)" ]]; then
              echo Installing awscli ...
              sudo apt-get -y update
              sudo apt-get -y install awscli
            fi
            # Delete files uploaded to S3
            aws s3 rm "s3://udapeople-<<parameters.id>>" --recursive
            # Destroy front-end
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<<parameters.id>>"
            # Destroy back-end
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<<parameters.id>>"

  revert-migrations:
    description: Revert the last migration
    parameters:
      id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Example: kvdb.io
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_IO_TOKEN}/migration_<< parameters.id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan front-end
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix || npm audit fix --force || true
            npm audit --audit-level=critical || true
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Scan back-end
          command: |
            cd backend
            npm audit fix || npm audit fix --force || true
            npm audit --audit-level=critical || true
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.01
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters "Name=tag:project,Values=udapeople" \
              "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output=text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: [project/.circleci/ansible/inventory.txt]
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: cimg/aws:2023.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6a:36:3c:df:8d:88:e6:70:d9:a0:45:8d:0d:8e:ab:a6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y update
            sudo apt-get -y install ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 15m
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations | tee migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt; then
              curl https://kvdb.io/${KVDB_IO_TOKEN}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            if [[ ! -x "$(command -v aws)" ]]; then
              echo Installing awscli ...
              sudo apt-get -y update
              sudo apt-get -y install awscli
            fi
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP="$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --output=text)"
            echo API_URL="http://${BACKEND_IP}:3030" | tee -a frontend/.env
      - run:
          name: Build frontend with backend url
          command: |
            cd frontend
            npm run build
            tar -czf ../frontend.tar.gz dist
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6a:36:3c:df:8d:88:e6:70:d9:a0:45:8d:0d:8e:ab:a6"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y update
            sudo apt-get -y install ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            tar -czf ../backend.tar.gz .
            cd ../.circleci/ansible
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
              -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            if [[ ! -x "$(command -v aws)" ]]; then
              echo Installing awscli ...
              sudo apt-get -y update
              sudo apt-get -y install awscli
            fi
      - run:
          name: Get backend url
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --output=text \
            | tee backend_ip
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP="$(cat backend_ip)"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            if [[ ! -x "$(command -v aws)" ]]; then
              echo Installing awscli ...
              sudo apt-get -y update
              sudo apt-get -y install awscli
            fi
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate --output text)
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
      docker:
        - image: cimg/aws:2023.01
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
              # Fetch the stack names
              export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE \
                --no-paginate --output text))
              echo Stack names: "${STACKS[@]}"
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              for STACK_NAME in ${STACKS[@]}; do
                if [[ "$STACK_NAME" =~ "${CIRCLE_WORKFLOW_ID:0:7}" ]]; then
                  echo Deleting $STACK_NAME
                  aws cloudformation delete-stack --stack-name "$STACK_NAME"
                fi
              done

workflows:
  default:
    jobs:
      - build-frontend:
          context: cdond-c3
      - build-backend:
          context: cdond-c3
      - test-frontend:
          context: cdond-c3
          requires: [build-frontend]
      - test-backend:
          context: cdond-c3
          requires: [build-backend]
      - scan-frontend:
          context: cdond-c3
          requires: [build-frontend]
      - scan-backend:
          context: cdond-c3
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
